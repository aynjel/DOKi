image: node:12.19.0-alpine3.10
# image: coolnumber9/node-ionic-angular:nov2020-v1.0.2

options:
  max-time: 25
  # docker: true
  size: 2x

definitions:
  caches:
    npm: $HOME/.npm
    cypress: $HOME/.cache/Cypress
  services:
    docker:
      memory: 4096
  # Job definition for running E2E tests in parallel
  e2e: &e2e
    name: E2E Parallel Tests
    caches:
      - npm
      - cypress
      - node # pre-defined cache
    image: cypress/base:10
    script:
      - npm install -g @angular/cli
      - npm install -g @ionic/cli
      - npm install -g wait-on
      - npm install
      - ng run app:serve --host=localhost --port=8100 & wait-on http://localhost:8100
      - npx cypress run --record --key $DPP_CYPRESS_RECORD_KEY --parallel --group parallel-tests --spec "cypress/integration/e2e/*" 
    artifacts:
      - cypress/screenshots/**
      - cypress/reports/**
      - cypress/videos/**
  steps:
    - step: &code-linting
        name: Code Linting
        script:
          - echo "Code linting to be added soon..."
    - step: &code-linting-eslint
        name: Code Linting
        script:
          - npm install eslint
          - npx eslint .
          - npx eslint --format=checkstyle -o checkstyle-result.xml *.js
        after-script:
          - pipe: atlassian/checkstyle-report:0.2.0
        caches:
          - node # pre-defined cache
    - step: &snyk-security-scan
        name: Snyk Security Scan
        script:
          - pipe: snyk/snyk-scan:0.4.6
            variables:
              SNYK_TOKEN: $SNYK_TOKEN
              LANGUAGE: "npm"
              CODE_INSIGHTS_RESULTS: "true"
              MONITOR: "true"
    - step: &e2e-ingress
        name: E2E (Ingress)
        caches:
          - npm
          - cypress
          - node # pre-defined cache
        image: cypress/base:10
        script:
          - npm install -g @angular/cli
          - npm install -g @ionic/cli
          - npm install -g wait-on
          - npm install
          - ng run app:serve --host=localhost --port=8100 & wait-on http://localhost:8100
          - npx cypress run --record --key $DPP_CYPRESS_RECORD_KEY --spec "cypress/integration/e2e/ingress/*"
        artifacts:
          - cypress/screenshots/**
          - cypress/reports/**
          - cypress/videos/**
    - step: &e2e-all-in-one-run
        name: E2E (non-parallel)
        caches:
          - npm
          - cypress
          - node # pre-defined cache
        image: cypress/base:10
        script:
          - npm install -g @angular/cli
          - npm install -g @ionic/cli
          - npm install -g wait-on
          - npm install
          - ng run app:serve --host=localhost --port=8100 & wait-on http://localhost:8100
          - npx cypress run --record --key $DPP_CYPRESS_RECORD_KEY --group all-in-one-run --spec "cypress/integration/e2e/all/*"
        artifacts:
          - cypress/screenshots/**
          - cypress/reports/**
          - cypress/videos/**
    - step: &e2e-parallel-tests
        name: E2E (parallel)
        caches:
          - npm
          - cypress
          - node # pre-defined cache
        image: cypress/base:12
        script:
          - npm install -g @angular/cli
          - npm install -g @ionic/cli
          - npm install -g wait-on
          - npm install
          - ng run app:serve --host=localhost --port=8100 & wait-on http://localhost:8100
          - npx cypress run --record --key $DPP_CYPRESS_RECORD_KEY --group parallel-tests --parallel --spec "cypress/integration/e2e/parallel/*"
        artifacts:
          - cypress/screenshots/**
          - cypress/reports/**
          - cypress/videos/**
    - step: &e2e-egress
        name: E2E (Egress)
        caches:
          - npm
          - cypress
          - node # pre-defined cache
        image: cypress/base:10
        script:
          - npm install -g @angular/cli
          - npm install -g @ionic/cli
          - npm install -g wait-on
          - npm install
          - ng run app:serve --host=localhost --port=8100 & wait-on http://localhost:8100
          - npx cypress run --record --key $DPP_CYPRESS_RECORD_KEY --spec "cypress/integration/e2e/egress/*"
        artifacts:
          - cypress/screenshots/**
          - cypress/reports/**
          - cypress/videos/**
    - step: &build-artifacts
        name: Build PWA Artifacts
        image: cypress/base:10 # Because of Cypress dev dependency.
        # image: atlassian/default-image:2  # Image with Zip already installed
        script:
          - apt-get update && apt-get install -y zip
          - npm install -g @angular/cli
          - npm install -g @ionic/cli
          - npm ci
          - ionic build --prod
          - cd www && zip -r ../doki-$BITBUCKET_BUILD_NUMBER.zip .
        artifacts:
          # - node_modules/** # Save modules for next steps
          - www/**
          - doki-*.zip
    # --------- Firebase Cloud Deployment ---------
    - step: &deploy-staging-to-firebase
        name: Deploy Staging (Firebase)
        deployment: staging
        script:
          - pipe: atlassian/firebase-deploy:0.6.0
            variables:
              FIREBASE_TOKEN: $DPP_STAGING_FIREBASE_TOKEN
    # --------- Azure Web App Deployment ---------
    - step: &deploy-to-azure-prod
        name: Deploy to Azure
        deployment: production
        script:
        - pipe: atlassian/azure-web-apps-deploy:1.0.0
          variables:
            AZURE_APP_ID: $AZURE_APP_ID
            AZURE_PASSWORD: $AZURE_PASSWORD
            AZURE_TENANT_ID: $AZURE_TENANT_ID
            AZURE_RESOURCE_GROUP: $AZURE_RESOURCE_GROUP
            AZURE_APP_NAME: $AZURE_APP_NAME
            ZIP_FILE: 'doki-$BITBUCKET_BUILD_NUMBER.zip'
            # SLOT: 'doki-apps'
    - step: &deploy-to-azure-staging
        name: Deploy to Azure
        deployment: staging
        script:
        - pipe: atlassian/azure-web-apps-deploy:1.0.0
          variables:
            AZURE_APP_ID: $AZURE_APP_ID
            AZURE_PASSWORD: $AZURE_PASSWORD
            AZURE_TENANT_ID: $AZURE_TENANT_ID
            AZURE_RESOURCE_GROUP: $AZURE_RESOURCE_GROUP
            AZURE_APP_NAME: $AZURE_APP_NAME
            ZIP_FILE: 'doki-$BITBUCKET_BUILD_NUMBER.zip'
            SLOT: 'staging'
    - step: &deploy-to-azure-billing-uat
        name: Deploy to Azure Billing (UAT)
        deployment: staging
        script:
        - pipe: atlassian/azure-web-apps-deploy:1.0.0
          variables:
            AZURE_APP_ID: $AZURE_APP_ID
            AZURE_PASSWORD: $AZURE_PASSWORD
            AZURE_TENANT_ID: $AZURE_TENANT_ID
            AZURE_RESOURCE_GROUP: $AZURE_RESOURCE_GROUP
            AZURE_APP_NAME: $AZURE_APP_NAME
            ZIP_FILE: 'doki-$BITBUCKET_BUILD_NUMBER.zip'
            SLOT: 'billing-uat'
    - step: &deploy-to-azure-doc-lasco-uat
        name: Deploy to Azure Billing (UAT)
        deployment: staging
        script:
        - pipe: atlassian/azure-web-apps-deploy:1.0.0
          variables:
            AZURE_APP_ID: $AZURE_APP_ID
            AZURE_PASSWORD: $AZURE_PASSWORD
            AZURE_TENANT_ID: $AZURE_TENANT_ID
            AZURE_RESOURCE_GROUP: $AZURE_RESOURCE_GROUP
            AZURE_APP_NAME: $AZURE_APP_NAME
            ZIP_FILE: 'doki-$BITBUCKET_BUILD_NUMBER.zip'
            SLOT: 'doc-lasco-uat'
    # --------- SFTP On-Premise Deployment ---------
    - step: &deploy-staging-using-sftp
        name: Deploy Staging (SFTP)
        deployment: staging
        script:
          - pipe: atlassian/sftp-deploy:0.5.6
            variables:
              USER: $DPP_USER
              SERVER: $DPP_SERVER
              REMOTE_PATH: $DPP_REMOTE_PATH_STAGING
              LOCAL_PATH: $DPP_LOCAL_PATH
              PASSWORD: $DPP_PASSWORD
              # DELETE_FLAG: 'false' # Don't delete existing files
              # EXTRA_ARGS: "--exclude=.bitbucket/ --exclude=.git/ --exclude=bitbucket-pipelines.yml --exclude=.gitignore" # Ignore these
    - step: &deploy-prod-using-sftp
        name: Deploy Prod (SFTP)
        deployment: production
        script:
          - pipe: atlassian/sftp-deploy:0.5.6
            variables:
              USER: $DPP_USER
              SERVER: $DPP_SERVER
              REMOTE_PATH: $DPP_REMOTE_PATH_PROD
              LOCAL_PATH: $DPP_LOCAL_PATH
              PASSWORD: $DPP_PASSWORD
              # DELETE_FLAG: 'false' # Don't delete existing files
              # EXTRA_ARGS: "--exclude=.bitbucket/ --exclude=.git/ --exclude=bitbucket-pipelines.yml --exclude=.gitignore" # Ignore these
    # --------- SCP On-Premise Deployment ---------
    - step: &deploy-staging-using-scp
        name: Deploy Staging (SCP)
        deployment: staging
        script:
          - pipe: atlassian/scp-deploy:0.3.13
            variables:
              USER: $DPP_USER
              SERVER: $DPP_SERVER
              REMOTE_PATH: $DPP_REMOTE_PATH_STAGING
              LOCAL_PATH: $DPP_LOCAL_PATH
    - step: &deploy-prod-using-scp
        name: Deploy Prod (SCP)
        deployment: production
        script:
          - pipe: atlassian/scp-deploy:0.3.13
            variables:
              USER: $DPP_USER
              SERVER: $DPP_SERVER
              REMOTE_PATH: $DPP_REMOTE_PATH_PROD
              LOCAL_PATH: $DPP_LOCAL_PATH
    - step: &run-pwa-on-docker-compose
        name: Run Tests using Docker Compose
        # image: coolnumber9/node-ionic-angular:nov2020-v1.0.2
        services:
          - docker
        caches:
          - docker # pre-defined cache
        size: 2x
        script:
          - docker-compose -f docker-compose-cypress.yml build
          - docker-compose -f docker-compose-cypress.yml up --exit-code-from cypress

pipelines:
  custom: 
    build-no-test-and-deploy-to-az-staging:
      - step: *build-artifacts
      - step: *deploy-to-azure-staging
    build-no-test-and-deploy-to-az-production:
      - step: *build-artifacts
      - step: *deploy-to-azure-prod
    build-no-test-and-deploy-to-az-staging-billing-uat:
      - step: *build-artifacts
      - step: *deploy-to-azure-billing-uat
    build-no-test-and-deploy-to-az-staging-doc-lasco-uat:
      - step: *build-artifacts
      - step: *deploy-to-azure-doc-lasco-uat
    build-no-test-and-deploy-to-firebase-staging:
      - step: *build-artifacts
      - step: *deploy-staging-to-firebase

  branches:
    '{dev_branch,develop,cypress-grouping}':
      - step: *code-linting
      - step: *snyk-security-scan
      # - step: *e2e-ingress
      # - step: *e2e-all-in-one-run // ---- v1.7.11
      # - parallel:
      #     # Run Cypress Tests in parallel (6 machines)
      #     - step: 
      #         <<: *e2e
      #         name: Cypress on Machine (1)
      #     - step:
      #         <<: *e2e
      #         name: Cypress on Machine (2)
      #     - step:
      #         <<: *e2e
      #         name: Cypress on Machine (3)
      #     - step:
      #         <<: *e2e
      #         name: Cypress on Machine (4)
      #     - step:
      #         <<: *e2e
      #         name: Cypress on Machine (5)
      # - step: *e2e-egress
      - step: *build-artifacts
      # - step: *deploy-staging-to-firebase
      - step: *deploy-to-azure-staging

    '{release/v3.2.5-e2e-update}':
      - step: *code-linting
      # - step: *snyk-security-scan
      # - step: *e2e-ingress
      - step: *e2e-parallel-tests 
      - parallel:
          # Run Cypress Tests in parallel (6 machines)
          - step: 
              <<: *e2e
              name: Cypress on Machine (1)
          - step:
              <<: *e2e
              name: Cypress on Machine (2)
          - step:
              <<: *e2e
              name: Cypress on Machine (3)
          - step:
              <<: *e2e
              name: Cypress on Machine (4)
          - step:
              <<: *e2e
              name: Cypress on Machine (5)
      - step: *e2e-egress
      - step: *build-artifacts
      # - step: *deploy-staging-to-firebase
      - step: *deploy-to-azure-staging

    master:
      - step: *code-linting
      - step: *snyk-security-scan
      # - step: *e2e-ingress
      # - step: *e2e-all-in-one-run // ---- v1.7.11
      # - parallel:
      #     # Run Cypress Tests in parallel (6 machines)
      #     - step:
      #         <<: *e2e
      #         name: Cypress on Machine (1)
      #     - step:
      #         <<: *e2e
      #         name: Cypress on Machine (2)
      #     - step:
      #         <<: *e2e
      #         name: Cypress on Machine (3)
      #     - step:
      #         <<: *e2e
      #         name: Cypress on Machine (4)
      #     - step:
      #         <<: *e2e
      #         name: Cypress on Machine (5)
      # - step: *e2e-egress
      - step: *build-artifacts
      - step: *deploy-to-azure-prod
